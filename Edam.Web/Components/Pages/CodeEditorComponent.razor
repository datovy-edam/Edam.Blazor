@page "/codeEditorComponent"
@inject IJSRuntime jsRuntime

<div class="editor-container">
   <StandaloneCodeEditor @ref="_editor" Id="monaco-editor-id" ConstructionOptions="EditorConstructionOptions" />
</div>

@code {
   private bool initialized = false;
   private string editorTabName = "MyDocument.json";

   private StandaloneCodeEditor _editor = null!;
   public string TextValue = "";
   private string[] decorationIds = new string[0];

   private StandaloneEditorConstructionOptions EditorConstructionOptions(StandaloneCodeEditor editor)
   {
      Console.WriteLine("Getting Options");

      EditorMinimapOptions minimapOptions = new EditorMinimapOptions();
      minimapOptions.Enabled = false;

      return new StandaloneEditorConstructionOptions
         {
            AutomaticLayout = true,
            Language = "javascript",
            GlyphMargin = true,
            Minimap = minimapOptions,
            Value = "\"use strict\";\n" +
                    "function Person(age) {\n" +
                    "   if (age) {\n" +
                    "       this.age = age;\n" +
                    "   }\n" +
                    "}\n" +
                    "Person.prototype.getAge = function () {\n" +
                    "   return this.age;\n" +
                    "};\n"
         };
   }

   private async Task ChangeTheme(ChangeEventArgs e)
   {
      Console.WriteLine($"setting theme to: {e.Value?.ToString()}");
      await BlazorMonaco.Editor.Global.SetTheme(jsRuntime, e.Value?.ToString());
   }

   protected async override Task OnAfterRenderAsync(bool firstRender)
   {
      if (firstRender)
      {
         initialized = true;
      }

      await base.OnAfterRenderAsync(firstRender);
   }

   public async Task SetValue(string value = null)
   {
      var val = value ?? TextValue;
      Console.WriteLine($"setting value to: {TextValue}");
      await _editor.SetValue(val);
   }

   public async Task GetValue()
   {
      var val = await _editor.GetValue();
      Console.WriteLine($"value is: {val}");
   }

   private async Task AddCommand()
   {
      await _editor.AddCommand((int)KeyMod.CtrlCmd | (int)KeyCode.Enter, (args) =>
      {
         Console.WriteLine("Ctrl+Enter : Editor command is triggered.");
      });
   }

   private async Task AddAction()
   {
      var actionDescriptor = new ActionDescriptor
         {
            Id = "testAction",
            Label = "Test Action",
            Keybindings = new int[] { (int)KeyMod.CtrlCmd | (int)KeyCode.KeyB },
            ContextMenuGroupId = "navigation",
            ContextMenuOrder = 1.5f,
            Run = (editor) =>
            {
               Console.WriteLine("Ctrl+B : Editor action is triggered.");
            }
         };
      await _editor.AddAction(actionDescriptor);
   }

   private async Task RegisterCodeActionProvider()
   {
      // Set sample marker
      var model = await _editor.GetModel();
      var markers = new List<MarkerData>
        {
            new MarkerData
            {
                CodeAsObject = new MarkerCode
                {
                    TargetUri = "https://www.google.com",
                    Value = "my-value"
                },
                Message = "Marker example",
                Severity = MarkerSeverity.Warning,
                StartLineNumber = 4,
                StartColumn = 3,
                EndLineNumber = 4,
                EndColumn = 7
            }
        };
      await BlazorMonaco.Editor.Global.SetModelMarkers(jsRuntime, model, "default", markers);

      // Register quick fix for marker
      await BlazorMonaco.Languages.Global.RegisterCodeActionProvider(jsRuntime, "javascript", (modelUri, range, context) =>
      {
         var codeActionList = new CodeActionList();
         if (context.Markers.Count == 0)
            return codeActionList;

         codeActionList.Actions = new List<CodeAction>
             {
                new CodeAction
                {
                    Title = "Fix example",
                    Kind = "quickfix",
                    Diagnostics = markers,
                    Edit = new WorkspaceEdit
                    {
                        Edits = new List<IWorkspaceEdit>
                        {
                            new WorkspaceTextEdit
                            {
                                ResourceUri = modelUri,
                                TextEdit = new TextEditWithInsertAsSnippet
                                {
                                    Range = range,
                                    Text = "THIS"
                                }
                            }
                        }
                    },
                    IsPreferred = true
                }
             };
         return codeActionList;
      });
   }

   private async Task RegisterCompletionItemProvider()
   {
      // Register completion item to replace warning item
      await BlazorMonaco.Languages.Global.RegisterCompletionItemProvider(jsRuntime, "javascript", (modelUri, position, context) =>
      {
         var completionList = new CompletionList()
            {
               Suggestions = new List<CompletionItem>
                 {
                    new CompletionItem
                    {
                        LabelAsString = "Replace by THIS",
                        Kind = CompletionItemKind.Variable,
                        Detail = "this -> THIS",
                        InsertText = "THIS",
                        Preselect = true,
                        RangeAsObject = new BlazorMonaco.Range
                        {
                            StartLineNumber = 4,
                            StartColumn = 3,
                            EndLineNumber = 4,
                            EndColumn = 7
                        }
                    }
                 }
            };
         return completionList;
      });
   }
}
